// 90 DEGREE CLOCKWISE ROTATION
import java.io.*;

class GFG
{
	
static int N = 4;

// Function to rotate the matrix 90 degree clockwise
static void rotate90Clockwise(int a[][])
{

	// Traverse each cycle
	for (int i = 0; i < N / 2; i++)
	{
		for (int j = i; j < N - i - 1; j++)
		{

			// Swap elements of each cycle
			// in clockwise direction
			int temp = a[i][j];
			a[i][j] = a[N - 1 - j][i];
			a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
			a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
			a[j][N - 1 - i] = temp;
		}
	}
}

// 90 DEGREE ANTICLOCKWISE ROTATION
// Java program to rotate a
// matrix by 90 degrees
import java.io.*;

class GFG {
	// An Inplace function to
	// rotate a N x N matrix
	// by 90 degrees in
	// anti-clockwise direction
	static void rotateMatrix(int N, int mat[][])
	{
		// Consider all squares one by one
		for (int x = 0; x < N / 2; x++) {
			// Consider elements in group
			// of 4 in current square
			for (int y = x; y < N - x - 1; y++) {
				// Store current cell in
				// temp variable
				int temp = mat[x][y];

				// Move values from right to top
				mat[x][y] = mat[y][N - 1 - x];

				// Move values from bottom to right
				mat[y][N - 1 - x]
					= mat[N - 1 - x][N - 1 - y];

				// Move values from left to bottom
				mat[N - 1 - x][N - 1 - y]
					= mat[N - 1 - y][x];

				// Assign temp to left
				mat[N - 1 - y][x] = temp;
			}
		}
	}
  
  // BOTH ARE ALMOST SAME WITH SLIGHT DIFFERENCES.
